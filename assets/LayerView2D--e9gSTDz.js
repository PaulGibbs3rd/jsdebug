import{g as C,dj as H,bB as $,b as i,c as u,c8 as P,m as h,gR as q,j,ah as A,jU as T,aG as b,e$ as O,t9 as m,H as x,aP as l,ex as I,aW as p,ta as k,fc as N,tb as U,tc as V,td as B}from"./index-CzvLtnX1.js";import{n as M}from"./Container-BrN4Ui-E.js";let v=class extends C{constructor(){super(...arguments),this._idToCounters=new H}get size(){return this._idToCounters.size}get objectIds(){return this._idToCounters.keys()}get highlightNamesByObjectId(){return z(this._idToCounters)}add(r,e){let s=!1;for(const t of r){const o=$(this._idToCounters,t,()=>(s=!0,new Map)),a=o.get(e)??0;a||(s=!0),o.set(e,a+1)}return s}delete(r,e){let s=!1;for(const t of r){const o=this._idToCounters.get(t);if(!o)continue;let a=o.get(e);a!=null&&(a--,a>0?o.set(e,a):(o.delete(e),s=!0),o.size===0&&(this._idToCounters.delete(t),s=!0))}return s}};function*z(n){for(const[r,e]of n)yield[r,e.keys()]}v=i([u("esri.views.2d.layers.support.HighlightCounter")],v);let d=class extends P{get version(){return this.commitVersionProperties(),(this._get("version")||0)+1}};i([h({readOnly:!0})],d.prototype,"version",null),d=i([u("esri.views.layers.support.ClipArea")],d);const R=d;var w;let c=w=class extends R{constructor(n){super(n),this.type="rect",this.left=null,this.right=null,this.top=null,this.bottom=null}clone(){return new w({left:this.left,right:this.right,top:this.top,bottom:this.bottom})}commitVersionProperties(){this.commitProperty("left"),this.commitProperty("right"),this.commitProperty("top"),this.commitProperty("bottom")}};i([h({type:[Number,String],json:{write:!0}})],c.prototype,"left",void 0),i([h({type:[Number,String],json:{write:!0}})],c.prototype,"right",void 0),i([h({type:[Number,String],json:{write:!0}})],c.prototype,"top",void 0),i([h({type:[Number,String],json:{write:!0}})],c.prototype,"bottom",void 0),c=w=i([u("esri.views.layers.support.ClipRect")],c);const G=c;var _;const L={base:T,key:"type",typeMap:{extent:A,polygon:j}};let g=_=class extends R{constructor(n){super(n),this.type="geometry",this.geometry=null}clone(){return new _({geometry:this.geometry?.clone()??null})}commitVersionProperties(){this.commitProperty("geometry")}};i([h({types:L,json:{read:q,write:!0}})],g.prototype,"geometry",void 0),g=_=i([u("esri.views.layers.support.Geometry")],g);const D=g;let y=class extends R{constructor(n){super(n),this.type="path",this.path=[]}commitVersionProperties(){this.commitProperty("path")}};i([h({type:[[[Number]]],json:{write:!0}})],y.prototype,"path",void 0),y=i([u("esri.views.layers.support.Path")],y);const F=y,f=b.ofType({key:"type",base:null,typeMap:{rect:G,path:F,geometry:D}}),W=new(b.ofType(m)),Q=n=>{let r=class extends n{constructor(){super(...arguments),this._highlightCounter=new v,this.attached=!1,this.clips=new f,this.highlights=null,this.lastUpdateId=-1,this.moving=!1,this.updateRequested=!1,this._visibleAtCurrentScale=!0}initialize(){const e=this.view?.spatialReferenceLocked??!0;this.view?.spatialReference&&e&&!this.spatialReferenceSupported?this.addResolvingPromise(Promise.reject(new x("layerview:spatial-reference-incompatible","The spatial reference of this layer does not meet the requirements of the view",{layer:this.layer}))):(this.container||(this.container=new M),this.container.fadeTransitionEnabled=!0,this.container.visible=!1,this.container.endTransitions(),this.addHandles([l(()=>this.suspended,t=>{this.container&&(this.container.visible=!t)},p),l(()=>this.updateSuspended,t=>{this.view&&!t&&this.updateRequested&&this.view.requestUpdate()},p),l(()=>this.layer?.opacity??1,t=>{this.container&&(this.container.opacity=t)},p),l(()=>this.layer&&"blendMode"in this.layer?this.layer.blendMode:"normal",t=>{this.container&&(this.container.blendMode=t)},p),l(()=>this.layer&&"effect"in this.layer?this.layer.effect:null,t=>{this.container&&(this.container.effect=t)},p),l(()=>this._mergedHighlights.items.map(t=>({name:t.name,options:{fillColor:t.color,haloColor:t.haloColor,fillOpacity:t.fillOpacity,haloOpacity:t.haloOpacity,haloWidth:t.haloWidth,haloBlur:t.haloBlur}})),()=>{this.container.highlightGradient=k(this.container.highlightGradient,this._mergedHighlights.items)},p),l(()=>this._mergedHighlights.items.map(t=>t.name),()=>{this._processHighlight()}),I(()=>this.clips,"change",()=>{this.container&&(this.container.clips=this.clips)},p),l(()=>({scale:this.view?.scale,scaleRange:this.layer&&"effectiveScaleRange"in this.layer?this.layer.effectiveScaleRange:null}),({scale:t,scaleRange:o})=>{const a=N(o,t);a!==this._visibleAtCurrentScale&&(this._visibleAtCurrentScale=a)},p)],"constructor"),this.view?.whenLayerView?this.view.whenLayerView(this.layer).then(t=>{t===this&&this.processAttach()},()=>{}):this.when().then(()=>{this.processAttach()},()=>{}))}destroy(){this.processDetach(),this.updateRequested=!1}get highlightOptions(){return U(this)}set highlightOptions(e){V(this,e)}get hasHighlight(){return this._highlightCounter.size>0}get _mergedHighlights(){if(!this.view)return W;if(!this.highlights)return this.view.highlights;const e=this.view.highlights.clone();for(const s of this.highlights){const t=e.find(o=>o.name===s.name);t&&t.assignFrom(s)}return e}get highlightIds(){return Array.from(this._highlightCounter.objectIds)}get scheduler(){return this.view.scheduler}get spatialReferenceSupported(){const e=this.view?.spatialReference;return e==null||this.supportsSpatialReference(e)}get updating(){return this.spatialReferenceSupported&&(!this.attached||!this.suspended&&(this.updateRequested||this.isUpdating())||!!this._updatingHandles?.updating||this.container.transitioning)}get visibleAtCurrentScale(){return this._visibleAtCurrentScale}processAttach(){this.isResolved()&&!this.attached&&!this.destroyed&&this.spatialReferenceSupported&&(this.attach(),this.attached=!0,this.requestUpdate())}processDetach(){this.attached&&(this.attached=!1,this.removeHandles("attach"),this.detach(),this.updateRequested=!1)}requestUpdate(){this.destroyed||this.updateRequested||(this.updateRequested=!0,this.updateSuspended||this.view.requestUpdate())}processUpdate(e){!this.isFulfilled()||this.isResolved()?(this._set("updateParameters",e),this.updateRequested&&!this.updateSuspended&&(this.updateRequested=!1,this.update(e))):this.updateRequested=!1}hitTest(e,s){return Promise.resolve(null)}supportsSpatialReference(e){return!0}canResume(){if(!this.spatialReferenceSupported)return!1;switch(this.layer?.type){case"link-chart":case"knowledge-graph-sublayer":case"graphics":break;default:if(B(this.view)&&!this.view.inGeographicLayout)return!1}return!!super.canResume()&&this.visibleAtCurrentScale}getSuspendInfo(){const e=super.getSuspendInfo(),s=!this.spatialReferenceSupported;return s&&(e.spatialReferenceNotSupported=s),e}addAttachHandles(e){this.addHandles(e,"attach")}_addHighlights(e,s){this._highlightCounter.add(e,s)&&this._processHighlight()}_removeHighlights(e,s){this._highlightCounter.delete(e,s)&&this._processHighlight()}_processHighlight(){}_getHighlights(){const e=[];for(const[s,t]of this._highlightCounter.highlightNamesByObjectId){const o=this._getHighlightBits(t);e.push({objectId:s,highlightFlags:o})}return e}_getHighlightBits(e){const s=new Set(e);let t=1,o=0;if(!this.view)return 0;const a=this._mergedHighlights;for(const{name:S}of a)s.delete(S)&&(o=t),t<<=1;return o}};return i([h()],r.prototype,"attached",void 0),i([h({type:f,set(e){const s=O(e,this._get("clips"),f);this._set("clips",s)}})],r.prototype,"clips",void 0),i([h()],r.prototype,"container",void 0),i([h({type:m})],r.prototype,"highlightOptions",null),i([h({type:b.ofType(m)})],r.prototype,"highlights",void 0),i([h()],r.prototype,"_mergedHighlights",null),i([h()],r.prototype,"moving",void 0),i([h({readOnly:!0})],r.prototype,"spatialReferenceSupported",null),i([h({readOnly:!0})],r.prototype,"updateParameters",void 0),i([h()],r.prototype,"updateRequested",void 0),i([h()],r.prototype,"updating",null),i([h()],r.prototype,"view",void 0),i([h()],r.prototype,"_visibleAtCurrentScale",void 0),i([h({readOnly:!0})],r.prototype,"visibleAtCurrentScale",null),r=i([u("esri.views.2d.layers.LayerView2D")],r),r};export{Q as S,D as a};
