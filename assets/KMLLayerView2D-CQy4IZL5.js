import{c8 as B,ah as A,b as c,m as u,c as G,oy as O,f1 as T,b$ as $,fv as U,fw as E,x as F,dS as K,dQ as W,oz as j,w as H,K as J,bf as P,aG as Q,aP as Y,fe as X,u as I,f3 as Z,ao as L,oA as q,c3 as tt,M as et,oB as it}from"./index-CzvLtnX1.js";import{b as M,g as at,d as st}from"./kmlUtils-DLlXyJ2y.js";import{g as rt,f as ot,S as nt}from"./BitmapTechnique-YcmA_Lg2.js";import{r as lt}from"./BitmapContainer-CYTA_SEf.js";import{S as ht}from"./LayerView2D--e9gSTDz.js";import{t as R}from"./GraphicContainer-B78C-enC.js";import{A as k}from"./GraphicsView2D-CBTRavXz.js";import{y as pt}from"./LayerView-DMEwuW7Q.js";import{z as mt,a as ct}from"./rasterProjectionHelper-B6RYh9HO.js";import{n as dt}from"./VertexStream-CvOgQEEd.js";import{o as ut}from"./MaterialPrograms-ChoSzsBE.js";import{m as gt}from"./rasterUtils-q_qJHJk_.js";import"./GraphShaderModule-fiAQC1Zo.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-UBqTgyqK.js";import"./Utils-B-HfPvxQ.js";import"./BoundingBox-CfNhF6-u.js";import"./WGLBrushVTLSymbol-Ds8R82mK.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-PyQiTsc3.js";import"./Container-BrN4Ui-E.js";import"./EffectView-BiQ7qc0o.js";import"./AGraphicContainer-DyapwdFp.js";import"./TechniqueInstance-ChSshhqb.js";import"./UpdateTracking2D-DgMtH1pt.js";import"./TileContainer-Bq-a2BCj.js";import"./FeatureCommandQueue-C6yVidQ1.js";import"./CIMSymbolHelper-Dul3J0hn.js";import"./BidiEngine-QXap_35O.js";import"./rasterizingUtils-C1i-aeFk.js";import"./Rect-CUzevAry.js";import"./heatmapTextureUtils-C4N7TM8m.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-BH4vjdGx.js";import"./OverrideHelper-DIx2mYgX.js";import"./callExpressionWithFeature-BqIGys1L.js";import"./AttributeStore-XuGbXzoi.js";import"./queryUtils-6TLl6Zev.js";import"./json-Wa8cmqdu.js";import"./timeSupport-C95NcD1h.js";import"./TimeOnly-DUjwkvaH.js";import"./normalizeUtilsSync-Cc40aJ8I.js";import"./utils-BDxBHtAv.js";import"./programUtils-CwiKxPbA.js";let g=class extends B{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new A}};c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"id",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"rotation",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"href",void 0),c([u({type:A,nonNullable:!0,json:{write:!0}})],g.prototype,"extent",void 0),g=c([G("esri.layers.support.KMLMapImage")],g);class p{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(p._instance)return p._instanceRefCount++,p._instance;p._instanceRefCount=1,p._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl2");i.getExtension("OES_texture_float"),this._rctx=new O(i,{})}const a={applyProjection:!0,bilinear:!1,bicubic:!1},r=ut("raster/reproject","raster/reproject",new Map([["a_position",0]]),a);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new dt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,a,r=!1){const i=T(t.extent,a),s=new $({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:l,y:h}=mt(s,a,t.extent);let n=(l+h)/2;const o=Math.round((i.xmax-i.xmin)/n),w=Math.round((i.ymax-i.ymin)/n);n=(i.width/o+i.height/w)/2;const D=new $({x:n,y:n,spatialReference:i.spatialReference}),f=ct({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),x=gt(this._rctx,f),b=new U(o,w);b.wrapMode=E.CLAMP_TO_EDGE;const m=new F(this._rctx,b);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,o,w),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",f.spacing),this._program.setUniform2fv("u_transformGridSize",f.size),this._program.setUniform2f("u_targetImageSize",o,w),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),r){const{width:d,height:C}=m,y=new ImageData(d??0,C??0);m.readPixels(0,0,d??0,C??0,K.RGBA,W.UNSIGNED_BYTE,y.data);const N=m.detachColorTexture(j.COLOR_ATTACHMENT0);return m.dispose(),{texture:N,extent:i,imageData:y}}const S=m.detachColorTexture(j.COLOR_ATTACHMENT0);return m.dispose(),{texture:S,extent:i}}reprojectBitmapData(t,a){const r=rt(t.bitmapData)?ot(t.bitmapData):t.bitmapData,i=new U;i.wrapMode=E.CLAMP_TO_EDGE,i.width=t.bitmapData.width,i.height=t.bitmapData.height;const s=new H(this._rctx,i,r),l=this.reprojectTexture({texture:s,extent:t.extent},a,!0);l.texture.dispose();const h=document.createElement("canvas"),n=l.imageData;return h.width=n.width,h.height=n.height,h.getContext("2d").putImageData(n,0,0),{bitmapData:h,extent:l.extent}}async loadAndReprojectBitmapData(t,a,r){const i=(await J(t,{responseType:"image"})).data,s=document.createElement("canvas");s.width=i.width,s.height=i.height;const l=s.getContext("2d");l.drawImage(i,0,0);const h=l.getImageData(0,0,s.width,s.height);if(a.spatialReference.equals(r))return{bitmapData:h,extent:a};const n=this.reprojectBitmapData({bitmapData:h,extent:a},r);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(p._instanceRefCount--,p._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),p._instance=null)):(this._quad.dispose(),this._program.dispose())}}p._instanceRefCount=0;class z{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let _=class extends ht(pt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new lt,this._kmlVisualData=new z,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new Q}async hitTest(e,t){const a=this.layer;return[this._pointsView?.hitTest(e),this._polylinesView?.hitTest(e),this._polygonsView?.hitTest(e)].flat().filter(Boolean).map(r=>(r.layer=a,r.sourceLayer=a,{type:"graphic",graphic:r,layer:a,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),Y(()=>this.layer.visibleSublayers,e=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of e){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new p}detach(){this._fetchController=X(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,e.extent,this.view.spatialReference).then(t=>{const a=new nt(t.bitmapData);a.x=t.extent.xmin,a.y=t.extent.ymax,a.resolution=t.extent.width/t.bitmapData.width,a.rotation=e.rotation,this._mapImageContainer.addChild(a),this._bitmapIndex.set(e,a)})}async _getViewDependentUrl(e,t){const{viewFormat:a,viewBoundScale:r,httpQuery:i}=e;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let s;if(await Z(),r!=null&&r!==1){const d=new A(t.extent);d.expand(r),s=d}else s=t.extent;s=T(s,L.WGS84);const l=T(s,L.WebMercator),h=s.xmin,n=s.xmax,o=s.ymin,w=s.ymax,D=t.size[0]*t.pixelRatio,f=t.size[1]*t.pixelRatio,x=Math.max(l.width,l.height),b={"[bboxWest]":h.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":o.toString(),"[bboxNorth]":w.toString(),"[lookatLon]":s.center.x.toString(),"[lookatLat]":s.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":s.center.x.toString(),"[lookatTerrainLat]":s.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":s.center.x.toString(),"[cameraLat]":s.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":f.toString(),"[terrainEnabled]":"0","[clientVersion]":it,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=d=>{for(const C in d){let y;for(y in b)d[C]=d[C].replace(y,b[y])}},V=q(a);m(V);let v={};i!=null&&(v=q(i),m(v));const S=tt(e.href);return S.query={...S.query,...V,...v},`${S.path}?${et(V)}`}return e.href}async _fetchService(e){const t=new z;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,a){return this._fetchParsedKML(e,a).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const s=i.points?await M(i.points):[],l=i.polylines?await M(i.polylines):[],h=i.polygons?await M(i.polygons):[],n=i.mapImages?.map(o=>g.fromJSON(o))??[];if(t.allPoints.push(...s.map(o=>({item:o,sublayerId:i.id}))),t.allPolylines.push(...l.map(o=>({item:o,sublayerId:i.id}))),t.allPolygons.push(...h.map(o=>({item:o,sublayerId:i.id}))),t.allMapImages.push(...n.map(o=>({item:o,sublayerId:i.id}))),i.networkLink){const o=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(o,t,a)}}})}_fetchParsedKML(e,t){return at(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>st(a.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};c([u()],_.prototype,"_pointsView",void 0),c([u()],_.prototype,"_polylinesView",void 0),c([u()],_.prototype,"_polygonsView",void 0),c([u()],_.prototype,"updating",void 0),_=c([G("esri.views.2d.layers.KMLLayerView2D")],_);const oe=_;export{oe as default};
