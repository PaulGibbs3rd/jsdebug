import{ch as m,e_ as h,b as s,m as o,c as p}from"./index-CfYeSufM.js";import{N as g}from"./DynamicLayerView3D-DtduJJLA.js";import{m as u}from"./ImageryLayerView-BrEyZHvl.js";import"./LayerView3D-D9EaTEMQ.js";import"./projectExtentUtils-BOQDrrn9.js";import"./geometryServiceUtils-D_K144mp.js";import"./ImageMaterial.glsl-CTuPf0ue.js";import"./DefaultLayouts-DCPHPEww.js";import"./TriangleMaterial-hfPtYTfz.js";import"./LayerView-Ck8FMSD2.js";import"./RefreshableLayerView-Bu3cytnU.js";import"./timeSupport-BAwZ8uOa.js";import"./rasterProjectionHelper-BOOOTgKx.js";import"./popupUtils-DB8vJbLy.js";let r=class extends u(g){constructor(){super(...arguments),this.type="imagery-3d",this.redrawDebounced=m(async e=>{this.redraw((t,i)=>this._redrawImage(t,i),e)},2e3)}get highlightOptions(){return null}get pixelData(){return null}initialize(){this.addHandles([h(()=>this.view.basemapTerrain.ready,()=>this._initializeMaximumDataResolution(),{once:!0,initial:!0}),this.layer.on("redraw",()=>this._updatingHandles.addPromise(this.redrawDebounced()))]),this._updatingHandles.add(()=>{var e,t;return(t=(e=this.layer)==null?void 0:e.exportImageServiceParameters)==null?void 0:t.version},()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>{var e;return(e=this.layer)==null?void 0:e.renderer},()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>this.timeExtent,()=>this._updatingHandles.addPromise(this.refreshDebounced()))}_initializeMaximumDataResolution(){this.maximumDataResolution=this.layer.loaded?this.layer.serviceRasterInfo.pixelSize:null}getFetchOptions(){return{timeExtent:this.timeExtent}}async processResult(e,t,i){t.imageOrCanvasElement?e.image=t.imageOrCanvasElement:(e.image=document.createElement("canvas"),e.pixelData=t.pixelData,await this._redrawImage(e,i))}async _redrawImage(e,t){if(!(e.image instanceof HTMLCanvasElement)||e.pixelData==null)throw new Error;const i=e.image,n=i.getContext("2d"),d=await this.layer.applyRenderer(e.pixelData,{signal:t}),a=this.layer.applyFilter(d).pixelBlock;if(a==null)throw new Error;i.width=a.width,i.height=a.height;const l=n.createImageData(a.width,a.height);l.data.set(a.getAsRGBA()),n.putImageData(l,0,0)}highlight(e){throw new Error("Not implemented")}};s([o()],r.prototype,"highlightOptions",null),s([o()],r.prototype,"pixelData",null),r=s([p("esri.views.3d.layers.ImageryLayerView3D")],r);const P=r;export{P as default};
