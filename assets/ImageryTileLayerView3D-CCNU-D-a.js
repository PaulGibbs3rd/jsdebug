import{lp as l,dR as _,lq as g,H as x,em as T,lr as I,b as u,m as y,c as z}from"./index-CzvLtnX1.js";import{x as R}from"./rasterProjectionHelper-B6RYh9HO.js";import{l as G}from"./LayerView3D-C3wz0Xd_.js";import{p as w}from"./TiledLayerView3D-k4JOMenH.js";import{m as P,l as S,_ as v,p as O,A as C,f as L,c as f}from"./rasterUtils-q_qJHJk_.js";import{y as $}from"./ImageryTileLayerView-C0ib4sPl.js";import{y as A}from"./LayerView-DMEwuW7Q.js";import{i as E}from"./RefreshableLayerView-CoTThkI-.js";import{r as F}from"./drapedUtils-EmUI5byW.js";import"./rasterFieldUtils-B7rAGycz.js";import"./timeSupport-CgS5mQjm.js";import"./popupUtils-C5Xxoh_A.js";const b={bandCount:3,minOutput:0,maxOutput:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class U{constructor(e,t,r=null,a=null){this.lij=e,this.type="raster-tile",this._memoryUsed=null,this._source=null,this._symbolizerParameters=null,this._bandIds=null,this._interpolation=null,this._dirty=!1,this._transformGrid=null,this.isRendereredSource=!1,this.symbolizerRenderer=null,this.rawPixelData=null,this.opacity=1,this.source=t,this.width=r||t.width,this.height=a||t.height}get source(){return this._source}set source(e){this._source=e,this._rasterTexture=l(this._rasterTexture),this._memoryUsed=null}get symbolizerParameters(){return this.isRendereredSource?{...b,maxCutOff:[1,1,1],factor:[1,1,1]}:this._symbolizerParameters||b}set symbolizerParameters(e){this._symbolizerParameters=e}get bandIds(){return this._bandIds}set bandIds(e){e!=null&&e.length>0?this._bandIds&&e.every((t,r)=>!!this._bandIds?.[r]&&t===this._bandIds[r])||(this._bandIds=e,this._dirty=!0):this._bandIds=null}get interpolation(){return this._interpolation||"nearest"}set interpolation(e){if(this._interpolation=e,this._rasterTexture!=null){const t=this._getRasterTextureInterpolation(e);this._rasterTexture.setSamplingMode(t==="bilinear"?_.LINEAR:_.NEAREST)}}get transformGrid(){return this._transformGrid}set transformGrid(e){this._transformGrid=e,this._transformGridTexture=l(this._transformGridTexture),this._memoryUsed=null}bind(e){return!!(this.source&&this.source.pixels&&this.source.pixels.length>0)&&((this._rasterTexture==null||this._dirty)&&this._updateRasterTexture(e,this.bandIds),this._rasterTexture!=null&&(this._updateColormapTexture(e),this.transformGrid&&this._transformGridTexture==null&&(this._transformGridTexture=P(e,this.transformGrid))),!0)}getUniforms(){const{symbolizerParameters:e,transformGrid:t,width:r,height:a,opacity:i}=this,m=S(t,[r,a],[this.source.width,this.source.height],i),d=v(e.colormap,e.colormapOffset),p=this.symbolizerParameters.type==="stretch"?O(this.symbolizerParameters):null,o=this.symbolizerParameters.type==="hillshade"?C(this.symbolizerParameters):null;return new g(m,d,p||o,this._rasterTexture,this._transformGridTexture,this._colormapTexture)}get isBilinearWithStretchColorRamp(){const{symbolizerParameters:e}=this;return this.interpolation==="bilinear"&&e.colormap!=null&&e.type==="stretch"}get memoryUsage(){if(this._memoryUsed==null){const e=[this._rasterTexture,this._transformGridTexture,this._colormapTexture];this._memoryUsed=e.map(t=>t!=null?t.descriptor.width*t.descriptor.height*4:0).reduce((t,r)=>t+r,0)}return this._memoryUsed}release(){return this._rasterTexture=l(this._rasterTexture),this._transformGridTexture=l(this._transformGridTexture),this._colormapTexture=l(this._colormapTexture),this.source=null,this.transformGrid=null,this.rawPixelData=null,!0}_updateRasterTexture(e,t){const r=this.source?this.source.extractBands(t):null;if(!(r?.pixels&&r.pixels.length>0))return void(this._rasterTexture=l(this._rasterTexture));const a=t==null&&this.bandIds==null||t!=null&&this.bandIds!=null&&t.join("")===this.bandIds.join("");if(this._rasterTexture!=null&&a)return;this._rasterTexture=l(this._rasterTexture);const i=this._getRasterTextureInterpolation(this.interpolation);this._rasterTexture=L(e,r,i,this.isRendereredSource||this.hasStretchTypeNone())}hasStretchTypeNone(){return"stretchType"in this.symbolizerParameters&&this.symbolizerParameters.stretchType==="none"&&!this.symbolizerParameters.useGamma&&this.source.pixelType==="u8"}_getRasterTextureInterpolation(e){return this.symbolizerParameters.type==="lut"||e==="nearest"||e==="majority"||this.isBilinearWithStretchColorRamp?"nearest":"bilinear"}_updateColormapTexture(e){const t=this._colormap,r=this.symbolizerParameters.colormap;return r?t?r.length!==t.length||r.some((a,i)=>a!==t[i])?(this._colormapTexture=l(this._colormapTexture),this._colormapTexture=f(e,r),void(this._colormap=r)):void 0:(this._colormapTexture=f(e,r),void(this._colormap=r)):(this._colormapTexture=l(this._colormapTexture),void(this._colormap=null))}}let h=class extends $(E(w(G(A)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this._isAlignedMapTile=!0}initialize(){this.layer.increaseRasterJobHandlerUsage(),this.fullExtent==null&&this.addResolvingPromise(Promise.reject(new x("layerview:spatial-reference-incompatible","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})));const s=T(()=>this.view?.basemapTerrain?.tilingSchemeLocked).then(()=>{const e=this.view.basemapTerrain.tilingScheme,t=this.layer.tileInfo;this._isAlignedMapTile=["png","png24","png32","jpg","mixed"].includes(t.format)&&e.compatibleWith(t),this.tileInfo=this._isAlignedMapTile?t:e.toTileInfo(),this._updatingHandles.add(()=>[this.layer.renderer,this.layer.interpolation,this.layer.bandIds,this.layer.multidimensionalDefinition,this.layer.multidimensionalSubset,this.layer.rasterFunction,this.timeExtent],()=>this.refresh())});this.addResolvingPromise(s)}destroy(){this.layer.decreaseRasterJobHandlerUsage()}get _blankTile(){const s=document.createElement("canvas"),e=s.getContext("2d"),[t,r]=this.tileInfo.size;return s.width=t,s.height=r,e.clearRect(0,0,t,r),e.getImageData(0,0,t,r)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){const s=this.layer.tileInfo,e=this.tileInfo.lodAt(0)?.scale,t=this.layer.tileInfo.lodAt(s.lods.length-1)?.scale;return this.levelRangeFromScaleRange(e,t)}_getFullExtent(){return R(this.layer.serviceRasterInfo,this.view.basemapTerrain?.spatialReference??this.view.spatialReference)}async fetchTile(s,e){const t=this.tileInfo,r=this._canSymbolizeInWebGL(),a={tileInfo:t,requestRawData:r,signal:e.signal,timeExtent:this.timeExtent,requestAsImageElement:this._isAlignedMapTile,noClip:!1},{layer:i}=this,[m,d,p]=s,o=await i.fetchTile(m,d,p,a);if(o instanceof HTMLImageElement)return o;let c=o?.pixelBlock;if(c==null)return this._blankTile;if(!r&&(c=await i.applyRenderer(o),c==null))return this._blankTile;const n=new U([m,d,p],c,t.size[0],t.size[1]);return r?(n.symbolizerRenderer=i.symbolizer.rendererJSON,n.symbolizerParameters=i.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(m)),n.transformGrid=o.transformGrid,n.bandIds=i.bandIds):(n.isRendereredSource=!0,n.bandIds=null),n.interpolation=i.interpolation,n}_getSymbolizerOptions(s){const e=this.tileInfo.lodAt(s).resolution;return{pixelBlock:null,isGCS:this.view.basemapTerrain?.spatialReference!=null?this.view.basemapTerrain.spatialReference.isGeographic:this.view.spatialReference.isGeographic,resolution:{x:e,y:e},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(s){this._canSymbolizeInWebGL()&&JSON.stringify(s.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(s.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(s.lij[0])))}createFetchPopupFeaturesQueryGeometry(s,e){return F(s,e,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){this.suspended||this.emit("data-changed")}_canSymbolizeInWebGL(){const s=I(),{symbolizer:e}=this.layer,t=e.lookup?.colormapLut?.indexedColormap,r=!!this.layer.rasterFunction?.hasClipFunction,a=t&&t.length>4*(s.maxTextureSize||4906);return e.canRenderInWebGL&&!a&&!r}};u([y({readOnly:!0})],h.prototype,"_blankTile",null),u([y({readOnly:!0})],h.prototype,"imageFormatIsOpaque",null),u([y({readOnly:!0})],h.prototype,"hasMixedImageFormats",null),u([y({readOnly:!0})],h.prototype,"dataLevelRange",null),h=u([z("esri.views.3d.layers.ImageryTileLayerView3D")],h);const K=h;export{K as default};
