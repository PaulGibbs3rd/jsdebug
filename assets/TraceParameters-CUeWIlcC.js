import{c9 as m,b as t,m as e,c as p,c8 as u,bK as v,ao as b,am as j,lC as f,lD as a}from"./index-CfYeSufM.js";const s=new m({startingPoint:"starting-point",barrier:"barrier"});let i=class extends u{constructor(o){super(o),this.globalId=null,this.isFilterBarrier=!1,this.percentAlong=null,this.terminalId=null,this.type=null}};t([e({type:String,json:{write:!0}})],i.prototype,"globalId",void 0),t([e({type:Boolean,json:{write:!0}})],i.prototype,"isFilterBarrier",void 0),t([e({type:Number,json:{write:!0}})],i.prototype,"percentAlong",void 0),t([e({type:Number,json:{write:!0}})],i.prototype,"terminalId",void 0),t([e({type:s.apiValues,json:{type:s.jsonValues,read:{reader:s.read,source:"traceLocationType"},write:{writer:s.write,target:"traceLocationType"}}})],i.prototype,"type",void 0),i=t([p("esri.rest.networks.support.TraceLocation")],i);const h=i;var l;let r=l=class extends u{static from(o){return v(l,o)}constructor(o){super(o),this.namedTraceConfigurationGlobalId=null,this.gdbVersion=null,this.traceLocations=[],this.moment=null,this.outSpatialReference=null,this.traceConfiguration=null,this.resultTypes=null,this.traceType=null}writeOutSR(o,n,d){if(o!=null){const{wkid:c,latestWkid:y,wkt:w,wkt2:g}=o;n[d]=JSON.stringify({wkid:c??void 0,latestWkid:y??void 0,wkt:w??void 0,wkt2:g??void 0})}}};t([e({type:String,json:{read:{source:"traceConfigurationGlobalId"},write:{target:"traceConfigurationGlobalId"}}})],r.prototype,"namedTraceConfigurationGlobalId",void 0),t([e({type:String,json:{write:!0}})],r.prototype,"gdbVersion",void 0),t([e({type:[h],json:{write:!0}})],r.prototype,"traceLocations",void 0),t([e({type:Date,json:{type:Number,write:{writer:(o,n)=>{n.moment=o?o.getTime():null}}}})],r.prototype,"moment",void 0),t([e({type:b,json:{write:{allowNull:!0,target:"outSR"}}})],r.prototype,"outSpatialReference",void 0),t([j("outSpatialReference")],r.prototype,"writeOutSR",null),t([e({type:f,json:{write:!0}})],r.prototype,"traceConfiguration",void 0),t([e({type:[Object],json:{write:!0}})],r.prototype,"resultTypes",void 0),t([e({type:a.apiValues,json:{type:a.jsonValues,read:a.read,write:a.write}})],r.prototype,"traceType",void 0),r=l=t([p("esri.rest.networks.support.TraceParameters")],r);const T=r;export{T as default};
