import{b as f,ca as u,c as p,ah as a,b$ as S,oI as d}from"./index-CzvLtnX1.js";import{g as i,f as y,W as x,E as h,U as O,D as J,R as N,u as B,s as P}from"./dataUtils-DUduw_0w.js";import{m as b,j as g,_ as w,h as k}from"./RasterSymbolizer-i_m9Zjg5.js";import{T as v}from"./rasterFunctionHelper-Dv_fFNZf.js";import{w as z,j as D,a as T}from"./rasterProjectionHelper-B6RYh9HO.js";import{a as $,y as j,c as I}from"./PolynomialTransform-nd5x-2Mk.js";import"./pixelRangeUtils-CDdoTPKf.js";import"./_commonjsHelpers-DCkdB7M8.js";var c;let l=c=class extends ${constructor(){super(...arguments),this.type="identity"}clone(){return new c}};f([u({IdentityXform:"identity"})],l.prototype,"type",void 0),l=c=f([p("esri.layers.support.rasterTransforms.IdentityTransform")],l);const F=l,E={GCSShiftXform:I,IdentityXform:F,PolynomialXform:j};function G(n){if(!n?.type)return null;const t=E[n?.type];if(t){const r=new t;return r.read(n),r}return null}class M{convertVectorFieldData(e){const t=i.fromJSON(e.pixelBlock),r=y(t,e.type);return Promise.resolve(r!=null?r.toJSON():null)}computeStatisticsHistograms(e){const t=i.fromJSON(e.pixelBlock),r=b(t);return Promise.resolve(r)}async decode(e){const t=await g(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=i.fromJSON(e.pixelBlock),e.extent=e.extent?a.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(t!=null?t.toJSON():null)}async updateSymbolizer(e){this.symbolizer=w.fromJSON(e.symbolizerJSON),e.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=v(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:a.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(r=>r!=null?i.fromJSON(r):null),primaryPixelSizes:e.primaryPixelSizes?.map(r=>r!=null?S.fromJSON(r):null),primaryRasterIds:e.primaryRasterIds});return t!=null?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(i.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(e){const t=k(i.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=x(i.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel??0,e.useBilinear===!1);return t&&t.forEach((r,s)=>{t.set(s,r?.toJSON())}),Promise.resolve(t)}clipTile(e){const t=i.fromJSON(e.pixelBlock),r=h({...e,pixelBlock:t});return Promise.resolve(r?.toJSON())}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(m=>m?new i(m):null),r=O(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let s,o=r;return e.coefs&&(o=J(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(s=N(e.destDimension,e.gcsGrid),o=B(o,e.isUV?"vector-uv":"vector-magdir",s)),{pixelBlock:o?.toJSON(),localNorthDirections:s}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await P(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=a.fromJSON(e.projectedExtent),r=a.fromJSON(e.srcBufferExtent);let s=null;e.datumTransformationSteps&&(s=new d({steps:e.datumTransformationSteps})),(e.includeGCSGrid||z(t.spatialReference,r.spatialReference,s))&&await D();const o=e.rasterTransform?G(e.rasterTransform):null;return T({...e,projectedExtent:t,srcBufferExtent:r,datumTransformation:s,rasterTransform:o})}}export{M as default};
