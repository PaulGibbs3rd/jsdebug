import{hy as _,hz as R,H as I,hA as A,hB as D,hC as Q,ek as v,fd as P,ak as Z,aA as G,bs as M,hD as B,hE as N,K as z,hF as $,hG as H,hH as L,hI as J}from"./index-CzvLtnX1.js";import{u as U}from"./executeQueryForSnapping-Iy3V_e0n.js";import{f as W}from"./FeatureStore-B1CjHmrb.js";import{x as F,j as b}from"./queryUtils-6TLl6Zev.js";import{L as V}from"./QueryEngine-BW9qTl6x.js";import{I as K,N as Y,E as X}from"./geojson-BBbbR4XW.js";import{l as ee,a as te,u as se}from"./clientSideDefaults-CPaCyHtW.js";import{S as ie,E as re,g as w,f as T,p as E,h as k}from"./sourceUtils-CcYz-imp.js";import"./timeSupport-C95NcD1h.js";import"./BoundsStore-CrM5VOwr.js";import"./PooledRBush-IF1bQTeP.js";import"./optimizedFeatureQueryEngineAdapter-C01vnci5.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-9TmBMoEG.js";import"./WhereClause-D7Picv4q.js";import"./TimeOnly-DUjwkvaH.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./utils-BeXlThvO.js";import"./utils-CtGOd0WT.js";import"./utils-BJJHgLwi.js";import"./ClassBreaksDefinition-CXt_rIOj.js";import"./FixedIntervalBinParameters-BzwSDYbq.js";import"./date-DCujAECq.js";const ne={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:ie};class $e{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i=[],[s]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=K(s,{geometryType:e.geometryType}),u=e.fields||r.fields||[],d=e.hasZ!=null?e.hasZ:r.hasZ,p=r.geometryType;let h=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const m=e.spatialReference||_;let a=e.timeInfo;u===r.fields&&r.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const o=new R(u);let l=o.get(h);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,h=l.name):(l={alias:h,name:h,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},u.unshift(l));const y={};for(const n of u){if(n.name==null&&(n.name=n.alias),n.alias==null&&(n.alias=n.name),!n.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:n});if(!A.jsonValues.includes(n.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${n.name}"`,{field:n});if(n.name!==l.name){const g=D(n);g!==void 0&&(y[n.name]=g)}n.length==null&&(n.length=Q(n))}if(a){if(a.startTimeField){const n=o.get(a.startTimeField);n?(a.startTimeField=n.name,n.type="esriFieldTypeDate"):a.startTimeField=null}if(a.endTimeField){const n=o.get(a.endTimeField);n?(a.endTimeField=n.name,n.type="esriFieldTypeDate"):a.endTimeField=null}if(a.trackIdField){const n=o.get(a.trackIdField);n?a.trackIdField=n.name:(a.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:a}}))}a.startTimeField||a.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:a}}),a=null)}const c=p?se(p):void 0,q=o.dateFields.length?{timeZoneIANA:v}:null,f={warnings:i,featureErrors:[],layerDefinition:{...ne,drawingInfo:c??void 0,templates:ee(y),extent:void 0,geometryType:p,objectIdField:h,fields:u,hasZ:!!d,timeInfo:a,dateFieldsTimeReference:q}};this._queryEngine=new V({fieldsIndex:R.fromLayerJSON({fields:u,timeInfo:a,dateFieldsTimeReference:q}),geometryType:p,hasM:!1,hasZ:d,objectIdField:h,spatialReference:m,timeInfo:a,featureStore:new W({geometryType:p,hasM:!1,hasZ:d})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(l);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=te(y,h);const x=await this._createFeatures(s);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const C=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(C);const{fullExtent:O,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=O,S){const{start:n,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[n,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([re(t,i),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),U(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=P(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const r=this._normalizeFeatures(s);r&&this._queryEngine.featureStore.addMany(r)},s=>{this._queryEngine.featureStore.clear(),Z(s)||G.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:i}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:i}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:i,objectIdField:s}=this._queryEngine,r=Y(e,{geometryType:t,hasZ:i,objectIdField:s});if(!M(this._queryEngine.spatialReference,_))for(const u of r)u.geometry!=null&&(u.geometry=B(b(N(u.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:i}=this._loadOptions,s=(await z(t??"",{responseType:"json",query:{...i},signal:e})).data;return X(s),s}_normalizeFeatures(e,t){const{objectIdField:i,fieldsIndex:s}=this._queryEngine,r=[];for(const u of e){const d=this._createDefaultAttributes(),p=w(s,d,u.attributes,!0);p?t?.push(p):(this._assignObjectId(d,u.attributes,!0),u.attributes=d,u.objectId=d[i],r.push(u))}return r}async _applyEdits(e){const{adds:t,updates:i,deletes:s}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),i?.length&&this._applyUpdateEdits(r,i),s?.length){for(const p of s)r.deleteResults.push(T(p));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:u,timeExtent:d}=await this._queryEngine.fetchRecomputedExtents();return{extent:u,timeExtent:d,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:i}=e,{geometryType:s,hasM:r,hasZ:u,objectIdField:d,spatialReference:p,featureStore:h,fieldsIndex:m}=this._queryEngine,a=[];for(const o of t){if(o.geometry&&s!==$(o.geometry)){i.push(E("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),y=w(m,l,o.attributes);if(y)i.push(y);else{if(this._assignObjectId(l,o.attributes),o.attributes=l,o.uid!=null){const c=o.attributes[d];e.uidToObjectId[o.uid]=c}if(o.geometry!=null){const c=o.geometry.spatialReference??p;o.geometry=b(k(o.geometry,c),c,p)}a.push(o),i.push(T(o.attributes[d]))}}h.addMany(H([],a,s,u,r,d))}_applyUpdateEdits({updateResults:e},t){const{geometryType:i,hasM:s,hasZ:r,objectIdField:u,spatialReference:d,featureStore:p,fieldsIndex:h}=this._queryEngine;for(const m of t){const{attributes:a,geometry:o}=m,l=a?.[u];if(l==null){e.push(E(`Identifier field ${u} missing`));continue}if(!p.has(l)){e.push(E(`Feature with object id ${l} missing`));continue}const y=L(p.getFeature(l),i,r,s);if(o!=null){if(i!==$(o)){e.push(E("Incorrect geometry type."));continue}const c=o.spatialReference??d;y.geometry=b(k(o,c),c,d)}if(a){const c=w(h,y.attributes,a);if(c){e.push(c);continue}}p.add(J(y,i,r,s,u)),e.push(T(l))}}_createObjectIdGenerator(e,t){const i=e.fieldsIndex.get(e.objectIdField);if(i.type==="esriFieldTypeString")return()=>i.name+"-"+Date.now().toString(16);let s=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(s=Math.max(s,r.objectId));return s=Math.max(0,s)+1,()=>s++}_assignObjectId(e,t,i=!1){const s=this._queryEngine.objectIdField;e[s]=i&&s in t?t[s]:this._objectIdGenerator()}async _checkProjection(e){try{await F(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{$e as default};
