import{P as c,$ as o}from"./utils-CvZeHudG.js";import{h3 as p,h5 as u,h6 as i,h4 as g}from"./index-CzvLtnX1.js";const y="Image Service",v="imagery-layer-save",f="imagery-layer-save-as",d="imagery-tile-layer-save",h="imagery-tile-layer-save-as",l="WCS",I="wcs-layer-save",T="wcs-layer-save-as";function n(e){if(e.type==="imagery"||e.type==="wcs")return{isValid:!0};const{raster:a}=e,r=a?.datasetFormat==="Function"?a.primaryRasters?.rasters[0]:a;return{isValid:r?.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"),errorMessage:"imagery tile layer should be created from a tiled image service."}}function m(e){const a=e.layerJSON;return Promise.resolve(a&&Object.keys(a).length?a:null)}async function w(e,a){const{parsedUrl:r,title:t,fullExtent:s}=e;a.url=r.path,a.title||=t;try{a.extent=await p(s)}catch{a.extent=void 0}u(a,i.METADATA),g(a,i.TILED_IMAGERY,e.type==="imagery-tile")}async function E(e,a){const r=e.type==="imagery"?v:e.type==="imagery-tile"?d:I,t=e.type==="wcs"?l:y;return c({layer:e,itemType:t,validateLayer:n,createItemData:m,errorNamePrefix:r},a)}async function P(e,a,r){const t=e.type==="imagery"?f:e.type==="imagery-tile"?h:T,s=e.type==="wcs"?l:y;return o({layer:e,itemType:s,validateLayer:n,createItemData:m,errorNamePrefix:t,newItem:a,setItemProperties:w},r)}export{E as save,P as saveAs};
