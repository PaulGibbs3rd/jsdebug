import{b as r,oC as G,oD as A,oE as V,u as X,dz as Y,dy as j,dw as B,cZ as Z,cV as J,o2 as tt,o3 as et,ll as st,o4 as ot,dB as it,o5 as rt,o6 as at,o7 as nt,dD as dt,oF as pt,oG as L}from"./index-CzvLtnX1.js";import{a as ht}from"./WGLContainer-UBqTgyqK.js";import{o as lt}from"./FeatureCommandQueue-C6yVidQ1.js";import{t as U}from"./utils-ehcGqGxa.js";import{j as ut,_ as P,p as ct,X as ft,C as x,Y as vt,a as mt,w as yt,h as q,g as n,r as wt,U as xt,m as W,b as gt,P as F,v as _t,t as Mt}from"./GraphShaderModule-fiAQC1Zo.js";import{e as St}from"./TechniqueType-uMFRS8dR.js";class C extends gt{}r([q(0,x)],C.prototype,"pos",void 0),r([q(1,x)],C.prototype,"uv",void 0);class $t extends _t{}class N extends F{}r([n(wt)],N.prototype,"dvs",void 0);class m extends F{}r([n(x)],m.prototype,"perspective",void 0),r([n(x)],m.prototype,"texSize",void 0),r([n(P)],m.prototype,"wrapAroundShift",void 0),r([n(P)],m.prototype,"opacity",void 0),r([n(xt)],m.prototype,"texture",void 0);class w extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(ct(t,this.config.perspective)),o=new ft(e.pos.add(new x(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(i.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}r([n(N)],w.prototype,"transform",void 0),r([n(m)],w.prototype,"config",void 0),r([G(0,W(C))],w.prototype,"vertex",null),r([G(0,W($t))],w.prototype,"fragment",null);class bt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(U);const{isWrapAround:d,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...U,stencil:{write:!1,test:{compare:V.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),d&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,i))}shutdown(){X(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new j("pos",2,B.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new j("uv",2,B.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:Y.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class Dt extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=Z(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==J.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:d,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const g=L(u),p=i*o[0],v=i*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=d*p,b=d*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(p/2,v/2)),rt(a,a,at(p/$,-v/b,1)),nt(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:d,size:u,viewpoint:c}=s,f=this._localOrigin;let g,p=0;const v=dt(i);if(v&&i.isWrappable){const y=u[0],S=u[1],_=L(o),$=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*$+S*b),[D,z]=v.valid,h=pt(i),{x:I,y:K}=c.targetGeometry,k=[I,K],O=[0,0];s.toScreen(O,k);const M=[0,0];let E;E=a>d?.5*d:.5*a;const T=Math.floor((I+.5*h)/h),H=D+T*h,Q=z+T*h,R=[O[0]+E,0];s.toMap(M,R),M[0]>Q&&(p=h),R[0]=O[0]-E,s.toMap(M,R),M[0]<H&&(p=-h),g={worldWidth:h,xBounds:[D,z]}}for(const y of t)y.updateDrawCoords(f,p,i,g)}}export{Dt as u};
