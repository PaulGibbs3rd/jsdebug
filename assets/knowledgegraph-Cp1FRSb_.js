const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/knowledgeGraphService-DOlPrNox.js","assets/index-CfYeSufM.js","assets/networkEnums-CgZo0FKn.js","assets/GPMessage-BK1C6fJJ.js","assets/GraphQueryStreaming-CUEJSbLL.js"])))=>i.map(i=>d[i]);
import{bc as x,jS as y,_ as A,jV as _,bb as E,fr as F,jU as I,jX as K,ez as U,f2 as V,f3 as J,f1 as M,ao as j,eA as N,eB as O,jY as Q,jZ as z}from"./index-CfYeSufM.js";import{u as P,O as B,y as T,a6 as L,M as X,C as W,J as Y,K as k,F as Z,z as H,a7 as $,U as G}from"./arcade-D_ze7yWt.js";import{a as u,r as f}from"./unitConversion-C65YkDgA.js";import{l as tt}from"./portalUtils-BuvyZ9g4.js";import{p as nt,c as et,t as at,a as rt,b as it}from"./GraphQueryStreaming-CUEJSbLL.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-BXyiOCyb.js";import"./TimeOnly-DNvrMvt4.js";import"./number-CRXbdJTy.js";import"./WhereClause-bK2RCJcj.js";import"./hash-CcEbRgUF.js";let l=null;async function ot(t){const n=U.geometryServiceUrl??"";if(!n){V()||await J();for(const e of t)e.container[e.indexer]=M(e.container[e.indexer],j.WGS84);return}const a=t.map(e=>e.container[e.indexer]),i=new N({geometries:a,outSpatialReference:j.WGS84}),s=await O(n,i);for(let e=0;e<s.length;e++){const r=t[e];r.container[r.indexer]=s[e]}}async function D(t,n){const a=new E({portal:t,id:n});return await a.load(),l===null&&(l=await A(()=>import("./knowledgeGraphService-DOlPrNox.js").then(i=>i.k),__vite__mapDeps([0,1,2,3,4]))),await l.fetchKnowledgeGraph(a.url)}function v(t,n,a,i,s){if(t===null)return null;if(y(t)||F(t))return t;if(k(t)||k(t))return t.toJSDate();if(Z(t))return t.toStorageFormat();if(H(t))return t.toStorageString();if($(t)){const e={};for(const r of t.keys())e[r]=v(t.field(r),n,a,i,s),e[r]instanceof I&&s.push({container:e,indexer:r});return e}if(_(t)){const e=t.map(r=>v(r,n,a,i,s));for(let r=0;r<e.length;r++)e[r]instanceof I&&s.push({container:e,indexer:r});return e}return G(t)?t.spatialReference.isWGS84?t:t.spatialReference.isWebMercator&&n?K(t):t:void 0}function st(t,n){if(!t)return t;if(t.spatialReference.isWGS84&&n.spatialReference.isWebMercator)return z(t);if(t.spatialReference.equals(n.spatialReference))return t;throw new u(n,f.WrongSpatialReference,null)}function R(t,n){if(!t)return null;const a={};for(const i in t)a[i]=g(t[i],n);return a}function g(t,n){return t===null?null:_(t)?t.map(a=>g(a,n)):t instanceof et?{graphTypeName:t.typeName,id:t.id,graphType:"entity",properties:R(t.properties,n)}:t instanceof at?{graphType:"object",properties:R(t.properties,n)}:t instanceof rt?{graphTypeName:t.typeName,id:t.id,graphType:"relationship",originId:t.originId??null,destinationId:t.destinationId??null,properties:R(t.properties,n)}:t instanceof it?{graphType:"path",path:t.path?t.path.map(a=>g(a,n)):null}:G(t)?st(t,n):y(t)||F(t)||Q(t)?t:null}function St(t){t.mode==="async"&&(t.functions.knowledgegraphbyportalitem=function(n,a){return t.standardFunctionAsync(n,a,(i,s,e)=>{var m,d;if(P(e,2,2,n,a),e[0]===null)throw new u(n,f.PortalRequired,a);if(e[0]instanceof B){const p=T(e[1]);let h;return h=(m=n.services)!=null&&m.portal?n.services.portal:x.getDefault(),D(tt(e[0],h),p)}if(y(e[0])===!1)throw new u(n,f.InvalidParameter,a);const r=T(e[0]);return D(((d=n.services)==null?void 0:d.portal)??x.getDefault(),r)})},t.signatures.push({name:"knowledgegraphbyportalitem",min:2,max:2}),t.functions.querygraph=function(n,a){return t.standardFunctionAsync(n,a,async(i,s,e)=>{var b;P(e,2,4,n,a);const r=e[0];if(!L(r))throw new u(n,f.InvalidParameter,a);const m=e[1];if(!y(m))throw new u(n,f.InvalidParameter,a);l===null&&(l=await A(()=>import("./knowledgeGraphService-DOlPrNox.js").then(o=>o.k),__vite__mapDeps([0,1,2,3,4])));let d=null;const p=X(e[2],null);if(!(p instanceof W||p===null))throw new u(n,f.InvalidParameter,a);if(p){let o=[];d=v(p,!0,!1,n,o),o=o.filter(c=>!c.container[c.indexer].spatialReference.isWGS84),o.length>0&&await ot(o)}const h=new nt({openCypherQuery:m,bindParameters:d});(((b=r==null?void 0:r.serviceDefinition)==null?void 0:b.currentVersion)??11.3)>11.2&&(h.outputSpatialReference=n.spatialReference);const q=(await l.executeQueryStreaming(r,h)).resultRowsStream.getReader(),S=[];try{for(;;){const{done:o,value:c}=await q.read();if(o)break;if(_(c))for(const w of c)S.push(g(w,n));else{const w=[];for(const C of c)w.push(g(c[C],n));S.push(w)}}}catch(o){throw o}return W.convertJsonToArcade(S,Y(n),!1,!0)})},t.signatures.push({name:"querygraph",min:2,max:4}))}export{St as registerFunctions};
