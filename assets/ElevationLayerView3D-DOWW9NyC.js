import{H as u,G as f,ax as m,ay as d,az as p,aA as g,b as n,m as h,c as v}from"./index-CfYeSufM.js";import{s as w,a as $}from"./LercDecoder-MmRX2Uin.js";import{l as D}from"./LayerView3D-D9EaTEMQ.js";import{p as b}from"./TiledLayerView3D-D3ReP93C.js";import{y as T}from"./LayerView-Ck8FMSD2.js";let r=class extends b(D(T)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){var a,o,c;const e=this.view,t=(a=e.map)==null?void 0:a.allLayers,i=t&&t.includes(this.layer),s=(c=(o=e.map)==null?void 0:o.ground)==null?void 0:c.layers,l=s&&s.includes(this.layer);if(i&&!l){const y=new u("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(y))}this._lercDecoder=w(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=f(this._lercDecoder)}async fetchTile(e,t){const i=this.layer;if(m(i)){const o=await i.fetchTile(e[0],e[1],e[2],{noDataValue:d,signal:t.signal});return p(t)?void g.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):o}const s=this.getTileUrl(e),l=await t.requester.request(s,"binary",t),a=await this._lercDecoder.decode(l,{noDataValue:d},t.signal);if(a)return new $(a);throw new Error("LERC decoding failed")}};n([h()],r.prototype,"layer",void 0),n([h()],r.prototype,"tileInfo",null),r=n([v("esri.views.3d.layers.ElevationLayerView3D")],r);const I=r;export{I as default};
