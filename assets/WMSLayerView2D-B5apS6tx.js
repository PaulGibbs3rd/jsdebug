import{ak as S,aA as M,aP as R,u as q,ah as U,b as h,m as x,c as I}from"./index-CzvLtnX1.js";import{r as w}from"./BitmapContainer-CYTA_SEf.js";import{S as A}from"./LayerView2D--e9gSTDz.js";import{_ as E}from"./ExportStrategy-BYuDRw9l.js";import{y as H}from"./LayerView-DMEwuW7Q.js";import{i as W}from"./RefreshableLayerView-CoTThkI-.js";import{m as F}from"./WMSLayerView-DNW7Ee-x.js";import"./WGLContainer-UBqTgyqK.js";import"./Utils-B-HfPvxQ.js";import"./BoundingBox-CfNhF6-u.js";import"./WGLBrushVTLSymbol-Ds8R82mK.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-PyQiTsc3.js";import"./Container-BrN4Ui-E.js";import"./EffectView-BiQ7qc0o.js";import"./BitmapTechnique-YcmA_Lg2.js";import"./GraphShaderModule-fiAQC1Zo.js";import"./TechniqueType-uMFRS8dR.js";import"./ExportWMSImageParameters-DTHUeVI2.js";import"./timeSupport-CgS5mQjm.js";let s=class extends F(W(A(H))){constructor(){super(...arguments),this.bitmapContainer=new w}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch(e=>{S(e)||M.getLogger(this).error(e)})}attach(){const{layer:t}=this,{imageMaxHeight:e,imageMaxWidth:r}=t;this.bitmapContainer=new w,this.container.addChild(this.bitmapContainer),this.strategy=new E({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:e,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=q(this.strategy),this.container.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:e,bitmapContainer:r}=this,{x:a,y:o}=t,{spatialReference:b}=e;let i,n=0,d=0;if(r.children.some(C=>{const{width:c,height:g,resolution:l,x:m,y:p}=C,y=m+l*c,f=p-l*g;return a>=m&&a<=y&&o<=p&&o>=f&&(i=new U({xmin:m,ymin:f,xmax:y,ymax:p,spatialReference:b}),n=c,d=g,!0)}),!i)return null;const u=i.width/n,$=Math.round((a-i.xmin)/u),v=Math.round((i.ymax-o)/u);return{extent:i,width:n,height:d,x:$,y:v}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,r,a){return this.layer.fetchImageBitmap(t,e,r,{timeExtent:this.timeExtent,...a})}};h([x()],s.prototype,"strategy",void 0),h([x()],s.prototype,"updating",void 0),s=h([I("esri.views.2d.layers.WMSLayerView2D")],s);const et=s;export{et as default};
