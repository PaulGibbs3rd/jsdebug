import{g,aM as m,h as f,aN as b,aO as C,ak as w,aP as h,aQ as V,u as c,aR as v,aS as E,O,aT as x,aU as d,aV as S,aC as _,aW as G,aX as P,aY as $,b as n,m as a,c as A}from"./index-CzvLtnX1.js";import{W as H,u as I}from"./ExtentSet-qWs8Lc6G.js";import{a as R,p as z,u as D}from"./Graphics3DObjectStates-DZcqh-aC.js";import{e as j}from"./highlightUtils-D2lMfk8z.js";let r=class extends g{constructor(e){super(e),this.type="graphics-3d",this.graphicsCore=null,this.drapeSourceType=m.Features,this.scaleVisibilityEnabled=!1,this.frustumVisibilityEnabled=!1,this._suspendResumeExtent=null,this._updatingHandles=new f}initialize(){const{layer:e}=this,i="effectiveScaleRange"in e?e:null,l=this.scaleVisibilityEnabled&&i!=null,t=new H({owner:this,layer:this.owner.layer,preferredUpdatePolicy:b.SYNC,graphicSymbolSupported:!0,componentFactories:{elevationAlignment:(s,o)=>new z({graphicsCoreOwner:this,graphicsCore:s,queryGraphicUIDsInExtent:o,elevationProvider:this.view.elevationProvider}),scaleVisibility:l?(s,o)=>new I({graphicsCoreOwner:this,layer:i,queryGraphicUIDsInExtent:o,graphicsCore:s,basemapTerrain:this.owner.view.basemapTerrain}):null,objectStates:s=>new R(s)}});if(this._set("graphicsCore",t),this.frustumVisibilityEnabled&&this._set("frustumVisibility",new D({graphicsCoreOwner:this})),"fullOpacity"in this.owner){const s=this.owner;this._updatingHandles.add(()=>s.fullOpacity,()=>this.graphicsCore.opacityChange())}if("elevationInfo"in e){const s=e;this._updatingHandles.add(()=>s.elevationInfo,(o,p)=>{C(o,p)&&this._updatingHandles.addPromise(this.graphicsCore.elevationInfoChange())})}this._set("initializePromise",this._initializeAsync()),this._updatingHandles.addPromise(this.initializePromise)}async _initializeAsync(){try{await this.graphicsCore.initializePromise}catch(e){if(w(e))return;throw e}this.destroyed||(this.addHandles(h(()=>this.view.clippingArea,()=>this._updateClippingExtent(),V)),this._updateClippingExtent(),this._setupSuspendResumeExtent(),this.graphicsCore.startCreateGraphics())}destroy(){this._updatingHandles.destroy(),this._set("frustumVisibility",c(this.frustumVisibility)),this._set("graphicsCore",c(this.graphicsCore))}get layer(){return this.owner.layer}get view(){return this.owner.view}get scaleVisibility(){return this.graphicsCore?.scaleVisibility}get elevationAlignment(){return this.graphicsCore?.elevationAlignment}get scaleVisibilitySuspended(){return!(this.scaleVisibility==null||!this.scaleVisibility.suspended)}get frustumVisibilitySuspended(){return this.frustumVisibility!=null&&this.frustumVisibility.suspended}get suspended(){return this.owner.suspended??!1}get updating(){return!!(this.graphicsCore?.updating||this.scaleVisibility!=null&&this.scaleVisibility.updating||this.frustumVisibility!=null&&this.frustumVisibility.updating||this._updatingHandles.updating)}get graphics3DGraphics(){return this.graphicsCore?.graphics3DGraphics}get graphics3DGraphicsByObjectID(){return this.graphicsCore?.graphics3DGraphicsByObjectID}get loadedGraphics(){return this.owner.loadedGraphics}get fullOpacity(){return this.owner.fullOpacity??1}get slicePlaneEnabled(){return this.owner.slicePlaneEnabled}get updatePolicy(){return this.owner.updatePolicy}notifyGraphicGeometryChanged(e){this.graphicsCore.notifyGraphicGeometryChanged(e)}notifyGraphicVisibilityChanged(e){this.graphicsCore.notifyGraphicVisibilityChanged(e)}getRenderingInfo(e,i,l){const t=v(e,{renderer:i,arcade:l});if(t?.color){const s=t.color;s[0]=s[0]/255,s[1]=s[1]/255,s[2]=s[2]/255}return t}getRenderingInfoAsync(e,i,l,t){return E(e,{renderer:i,arcade:l,...t})}getHit(e){if(this.owner.loadedGraphics){const i=this.owner.loadedGraphics.find(l=>l.uid===e);if(i){const l=this.layer instanceof O?this.layer:null,t=x(i,l);return{type:"graphic",graphic:t,layer:t.layer}}}return null}whenGraphicBounds(e,i){return this.graphicsCore?this.graphicsCore.whenGraphicBounds(e,i):Promise.reject()}computeAttachmentOrigin(e,i){return this.graphicsCore?this.graphicsCore.computeAttachmentOrigin(e,i):null}getSymbolLayerSize(e,i){return this.graphicsCore?this.graphicsCore.getSymbolLayerSize(e,i):null}maskOccludee(e){const i=this.graphicsCore?.objectStates;if(!i)return d();const{set:l,handle:t}=i.acquireOccludeeSet(null);return i.setUid(l,e.uid),t}highlight(e,i){const l=this.graphicsCore?.objectStates;if(!l||e instanceof S)return u;const t=j(e);if(t.length===0)return u;if(t[0]instanceof _){const s=t.map(y=>y.uid),{set:o,handle:p}=l.acquireHighlightSet(i,null);return l.setUids(o,s),p}if(typeof t[0]=="number"){const s=t,{set:o,handle:p}=l.acquireHighlightSet(i,null);return l.setObjectIds(o,s),p}return u}_setupSuspendResumeExtent(){const{scaleVisibility:e,frustumVisibility:i}=this;if(e==null&&i==null)return;const l=({computedExtent:t,extentPadding:s})=>{this._suspendResumeExtent=P(t,this._suspendResumeExtent,$,s),e?.setExtent(this._suspendResumeExtent),i?.setExtent(this._suspendResumeExtent)};this.addHandles(h(()=>({computedExtent:this.graphicsCore?.computedExtent,extentPadding:this.graphicsCore?.extentPadding}),t=>l(t),G))}_updateClippingExtent(){const e=this.view.clippingArea;this.graphicsCore.setClippingExtent(e,this.view.spatialReference)&&this.graphicsCore.recreateAllGraphics()}};n([a()],r.prototype,"type",void 0),n([a({constructOnly:!0})],r.prototype,"owner",void 0),n([a()],r.prototype,"layer",null),n([a()],r.prototype,"view",null),n([a({constructOnly:!0})],r.prototype,"graphicsCore",void 0),n([a()],r.prototype,"scaleVisibility",null),n([a({constructOnly:!0})],r.prototype,"frustumVisibility",void 0),n([a()],r.prototype,"elevationAlignment",null),n([a()],r.prototype,"scaleVisibilitySuspended",null),n([a({readOnly:!0})],r.prototype,"frustumVisibilitySuspended",null),n([a()],r.prototype,"suspended",null),n([a({readOnly:!0})],r.prototype,"updating",null),n([a()],r.prototype,"loadedGraphics",null),n([a()],r.prototype,"fullOpacity",null),n([a()],r.prototype,"slicePlaneEnabled",null),n([a()],r.prototype,"drapeSourceType",void 0),n([a()],r.prototype,"updatePolicy",null),n([a({constructOnly:!0})],r.prototype,"scaleVisibilityEnabled",void 0),n([a({constructOnly:!0})],r.prototype,"frustumVisibilityEnabled",void 0),n([a()],r.prototype,"initializePromise",void 0),r=n([A("esri.views.3d.layers.graphics.GraphicsProcessor")],r);const u=d();export{r as x};
