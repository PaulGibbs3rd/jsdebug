import{aP as m,H as l,bE as h,aU as u,c2 as c,fr as d,b as o,m as a,c as y}from"./index-CzvLtnX1.js";import{n as g,d as f}from"./FeatureLayerView2D-ekV4vqBu.js";import{r as v}from"./StreamLayerView-jbZELj7M.js";import"./EffectView-BiQ7qc0o.js";import"./timeSupport-CgS5mQjm.js";import"./AttributeBinsFeatureSet-BHhVaxs1.js";import"./AttributeBinsQuery-CUaDaAln.js";import"./queryUtils-6TLl6Zev.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-BzwSDYbq.js";import"./LayerView2D--e9gSTDz.js";import"./Container-BrN4Ui-E.js";import"./TechniqueInstance-ChSshhqb.js";import"./UpdateTracking2D-DgMtH1pt.js";import"./Utils-B-HfPvxQ.js";import"./BoundingBox-CfNhF6-u.js";import"./TileContainer-Bq-a2BCj.js";import"./WGLContainer-UBqTgyqK.js";import"./WGLBrushVTLSymbol-Ds8R82mK.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-PyQiTsc3.js";import"./FeatureCommandQueue-C6yVidQ1.js";import"./CIMSymbolHelper-Dul3J0hn.js";import"./BidiEngine-QXap_35O.js";import"./rasterizingUtils-C1i-aeFk.js";import"./Rect-CUzevAry.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-fiAQC1Zo.js";import"./heatmapTextureUtils-C4N7TM8m.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-BH4vjdGx.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-vuGQIIFe.js";import"./constants-B4mRqufT.js";import"./parquet-CyT-A7vO.js";import"./FeatureLayerView-C-uC0TMb.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-C5Xxoh_A.js";import"./LayerView-DMEwuW7Q.js";import"./RefreshableLayerView-CoTThkI-.js";let i=class extends v(f){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new l("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return h(e.map(r=>this.on(r,t)));const s=["data-received","message-received"].includes(e);s&&this.getWorker().then(r=>r.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),n=this;return u(()=>{p.remove(),s&&(n._workerProxy.closed||n.hasEventListener(e)||n.getWorker().then(r=>r.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new l("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const s=await this.getWorker();return g(s.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const n=c.fromJSON(p);return n.features.forEach(r=>{r.layer=this.layer,r.sourceLayer=this.layer}),n}),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(d)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:s=>{this.set(s.propertyName,s.value)}}}};o([a()],i.prototype,"pipelineConnectionStatus",void 0),o([a()],i.prototype,"pipelineErrorString",void 0),o([a({readOnly:!0})],i.prototype,"connectionError",null),o([a({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=o([y("esri.views.2d.layers.StreamLayerView2D")],i);const oe=i;export{oe as default};
