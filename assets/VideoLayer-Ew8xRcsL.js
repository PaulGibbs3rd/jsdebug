import{gC as O,c8 as P,b as t,m as e,c as h,b$ as S,Q as c,am as T,g as I,a6 as $,a8 as w,S as x,ab as N,ao as U,aP as m,P as j,q0 as E,fu as L,aq as F,H as v,K as f,bL as J,O as R,ah as g,T as k}from"./index-CzvLtnX1.js";import{C as q,L as H,f as M,g as _,P as V,d as z,n as D,l as G}from"./VideoController-DkphRV8J.js";import{l as b}from"./TelemetryDisplay-CCyTnivY.js";import"./_commonjsHelpers-DCkdB7M8.js";let i=class extends O.ClonableMixin(P){constructor(o){super(o),this.framerate=null,this.containerFormat=null,this.gop=null,this.aspectRatio=null,this.klv=null}};t([e({type:String})],i.prototype,"framerate",void 0),t([e({type:String})],i.prototype,"containerFormat",void 0),t([e({type:Number})],i.prototype,"gop",void 0),t([e({type:String})],i.prototype,"aspectRatio",void 0),t([e({type:Object})],i.prototype,"klv",void 0),i=t([h("esri.layers.support.PlaybackInfo")],i);const Q=i;let y=class extends I{constructor(){super(...arguments),this.sourcePoint=null,this.mapPoint=null}};function W(o){return o?.sourcePoint!=null&&o.mapPoint!=null}t([e()],y.prototype,"sourcePoint",void 0),t([e({type:S})],y.prototype,"mapPoint",void 0),y=t([h("esri.layers.support.VideoFrame.ControlPoint")],y);let s=class extends O.ClonableMixin(P){constructor(o){super(o),this.frame=null,this.controlPoints=null}readControlPoints(o){return o.map(l=>({sourcePoint:{x:l.frameX,y:l.frameY},mapPoint:new S(l.point)}))}writeControlPoints(o,l){o!=null&&W(o[0])&&(l.controlPoints=o.map(n=>{const a=n.sourcePoint,u=n.mapPoint;return{frameX:a.x,frameY:a.y,point:u.toJSON()}}))}};t([e({type:String})],s.prototype,"frame",void 0),t([e({type:[y],json:{write:{allowNull:!1,isRequired:!0}}})],s.prototype,"controlPoints",void 0),t([c("controlPoints")],s.prototype,"readControlPoints",null),t([T("controlPoints")],s.prototype,"writeControlPoints",null),s=t([h("esri.layers.support.VideoFrame")],s);const A=s;let r=class extends $(w(x(N(R)))){constructor(o){super(o),this._trailPoints=[],this.capabilities=null,this.connectionInfo=null,this.controller=new q,this.copyright=null,this.created=null,this.description=null,this.elevationSource=null,this.frame=null,this.frameCount=null,this.fullExtent=null,this.initialExtent=null,this.layerId=null,this.playbackInfo=null,this.posterUrl=null,this.qualities=null,this.serviceItemId=null,this.sourceJSON=null,this.sourceQuality=null,this.sourceType=null,this.spatialReference=U.WGS84,this.telemetryDisplay=null,this.title=null,this.type="video",this.url=null,this.videoLayersInfo=null,this.videoTimeExtent=null}initialize(){this.telemetryDisplay=new b({frame:!1,frameCenter:!1,frameOutline:!0,lineOfSight:!0,sensorLocation:!0,sensorTrail:!0}),this.addHandles([m(()=>this.metadata,()=>{this.notifyChange("telemetry"),this.notifyChange("groundControlPoints"),this.notifyChange("frameHorizonPoints")}),m(()=>this.telemetry?.sensorLocation,o=>this._setSensorTrail(o),j)])}load(o){const l=o!=null?o.signal:null;return this.addResolvingPromise(this._fetchService(l)),Promise.resolve(this)}get buffered(){return this.controller.buffered}readCapabilitiesFromService(o,l){return E(l)}readConnectionInfo(o,l){const n=Object.values(l.connectionUrl);return n?.length&&(this.controller.playerUrl=n[0]),l.connectionUrl}get currentTime(){return this.controller.currentTime}get duration(){return this.controller.duration}get ended(){return this.controller.ended}get frameHorizonPoints(){return H(this.metadata)}get groundControlPoints(){return M(this.metadata)}get loop(){return this.controller.loop}set loop(o){this.controller.loop=o}get metadata(){return this.controller?.currentMetadata}get mimeType(){return this.controller?.mimeType}get muted(){return this.controller.muted}set muted(o){this.controller.muted=o}get playbackRate(){return this.controller.rate}set playbackRate(o){this.controller.rate=o}get playerUrl(){return this.controller.playerUrl}get playing(){return this.controller.playing}get state(){return this.controller.state}get telemetry(){return _(this.metadata)}get videoElement(){return this.controller?.element}get videoHeight(){return this.controller?.videoHeight}readLayerInfosFromService(o,l){return V(l)}get videoWidth(){return this.controller?.videoWidth}get waiting(){return this.controller.waiting}play(){this.controller.play()}pause(){this.controller.pause()}reset(){this.controller.reset()}setCurrentTime(o){if(!this.duration)return;const l=L(o,0,this.duration);this.controller.setCurrentTime(l)}toGround(o,l){return this.controller?.sensorModel?.metadataSupportsTransforms?this.controller.sensorModel.transformImageToGeo(o,l):null}toVideo(o){if(!this.controller?.sensorModel?.metadataSupportsTransforms)return null;const l=this.controller.sensorModel.transformGeoToImage(o.x,o.y,o.z);return{x:l[0],y:l[1]}}async _fetchService(o){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const l=F(this.parsedUrl?.path);if(l==null)throw new v("arcgis-layers:url-mismatch","The url is not a valid arcgis resource");let n=null;const{data:a,ssl:u}=await f(l.url.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},signal:o}),p=a;if(this.url=l.url.path,u&&(this.url=this.url.replace(/^http:/i,"https:")),!p?.currentVersion)return p.currentVersion="11.2",this.sourceJSON=p,void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});let d=l?.sublayer;if(d==null&&p.layers?.length&&(d=p.layers[0].id),d==null)throw new v("arcgis-layers:url-mismatch","The url is not a valid arcgis resource");this.url=`${l.url.path}/${d}`,n=await f(this.url,{query:{f:"json",...this.customParameters},signal:o});const C={...p,...n.data};this.sourceJSON=C,this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl})}_setSensorTrail(o){if(!o)return;const l=z(o,this._trailPoints);this._trailPoints=[...l];const n=this._trailPoints.map(u=>u.toArray()),a=new J({hasZ:o.hasZ,paths:[n]});this.telemetry.sensorTrail=a.clone()}};t([e({readOnly:!0})],r.prototype,"buffered",null),t([e({readOnly:!0,json:{read:!1}})],r.prototype,"capabilities",void 0),t([c("service","capabilities",["supportsAppend","supportsCoverageQuery","supportsExportClip","supportsExportFrameset","supportsMensuration","supportsUpdate"])],r.prototype,"readCapabilitiesFromService",null),t([e({readOnly:!0})],r.prototype,"connectionInfo",void 0),t([c("connectionInfo",["connectionUrl"])],r.prototype,"readConnectionInfo",null),t([e()],r.prototype,"controller",void 0),t([e({type:String})],r.prototype,"copyright",void 0),t([e({readOnly:!0,type:Date})],r.prototype,"created",void 0),t([e({type:Number})],r.prototype,"currentTime",null),t([e({type:String})],r.prototype,"description",void 0),t([e({type:Number})],r.prototype,"duration",null),t([e({readOnly:!0})],r.prototype,"elevationSource",void 0),t([e({type:Boolean})],r.prototype,"ended",null),t([e({type:A})],r.prototype,"frame",void 0),t([e({readOnly:!0,type:Number})],r.prototype,"frameCount",void 0),t([e({type:g})],r.prototype,"fullExtent",void 0),t([e({readOnly:!0})],r.prototype,"frameHorizonPoints",null),t([e({readOnly:!0})],r.prototype,"groundControlPoints",null),t([e({type:g})],r.prototype,"initialExtent",void 0),t([e({readOnly:!0,json:{read:{source:"id"}}})],r.prototype,"layerId",void 0),t([e({type:Boolean})],r.prototype,"loop",null),t([e({readOnly:!0})],r.prototype,"metadata",null),t([e({readOnly:!0})],r.prototype,"mimeType",null),t([e({type:Boolean})],r.prototype,"muted",null),t([e({type:Q})],r.prototype,"playbackInfo",void 0),t([e({type:Number})],r.prototype,"playbackRate",null),t([e({type:String})],r.prototype,"playerUrl",null),t([e({readOnly:!0})],r.prototype,"playing",null),t([e({readOnly:!0,json:{read:{source:"poster"}}})],r.prototype,"posterUrl",void 0),t([e({readOnly:!0})],r.prototype,"qualities",void 0),t([e({readOnly:!0})],r.prototype,"serviceItemId",void 0),t([e()],r.prototype,"sourceJSON",void 0),t([e({readOnly:!0})],r.prototype,"sourceQuality",void 0),t([e({readOnly:!0,json:{name:"serviceType"}})],r.prototype,"sourceType",void 0),t([e()],r.prototype,"spatialReference",void 0),t([e({readOnly:!0,type:String})],r.prototype,"state",null),t([e({readOnly:!0,type:D})],r.prototype,"telemetry",null),t([e({type:b})],r.prototype,"telemetryDisplay",void 0),t([e({readOnly:!1,json:{read:{source:"name"}}})],r.prototype,"title",void 0),t([e({readOnly:!0})],r.prototype,"type",void 0),t([e(k)],r.prototype,"url",void 0),t([e({readOnly:!0})],r.prototype,"videoElement",null),t([e({readOnly:!0})],r.prototype,"videoHeight",null),t([e({readOnly:!0,json:{read:!1}})],r.prototype,"videoLayersInfo",void 0),t([c("service","videoLayersInfo",["id","name","poster","serviceType","type"])],r.prototype,"readLayerInfosFromService",null),t([e({readOnly:!0,nonNullable:!1,json:{read:{reader:G,source:"time"}}})],r.prototype,"videoTimeExtent",void 0),t([e({readOnly:!0})],r.prototype,"videoWidth",null),t([e({readOnly:!0})],r.prototype,"waiting",null),r=t([h("esri.layers.VideoLayer")],r);const K=r;export{K as default};
