import{aP as m,H as h,bE as y,aU as g,c2 as u,fr as f,b as o,m as p,c as v}from"./index-CfYeSufM.js";import{n as _,d as S}from"./FeatureLayerView2D-D1H9skqr.js";import{r as I}from"./StreamLayerView-DtVDOfz-.js";import"./EffectView-Jcs4MyZ6.js";import"./timeSupport-BAwZ8uOa.js";import"./AttributeBinsFeatureSet-BnlZxvtu.js";import"./AttributeBinsQuery-ROoo0rpH.js";import"./queryUtils-DtT3aDWa.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-Bkvg0YgI.js";import"./LayerView2D-C4Cdeea2.js";import"./Container-Cz9A_ioc.js";import"./TechniqueInstance-suOgeU_P.js";import"./UpdateTracking2D-BGJ5gcc8.js";import"./Utils-TBp02Upz.js";import"./BoundingBox-hvRvsOsN.js";import"./TileContainer-aWWjUWr5.js";import"./WGLContainer-DAL2R1TP.js";import"./WGLBrushVTLSymbol-D4Azmvhv.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-CbnhisJb.js";import"./FeatureCommandQueue-DEjbHgMN.js";import"./CIMSymbolHelper-DLCfSN7J.js";import"./BidiEngine-QXap_35O.js";import"./rasterizingUtils-DzQCuzrR.js";import"./Rect-CUzevAry.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-rlKkNXTl.js";import"./heatmapTextureUtils-BwsdgbXL.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-w0BYbTZ1.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-E7zsDrTg.js";import"./constants-B4mRqufT.js";import"./parquet-DjVsKd2P.js";import"./FeatureLayerView-D6XNYoj9.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-DB8vJbLy.js";import"./LayerView-Ck8FMSD2.js";import"./RefreshableLayerView-Bu3cytnU.js";let i=class extends I(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return y(e.map(r=>this.on(r,t)));const s=["data-received","message-received"].includes(e);s&&this.getWorker().then(r=>r.streamMessenger.enableEvent(e,!0));const a=super.on(e,t),n=this;return g(()=>{a.remove(),s&&(n._workerProxy.closed||n.hasEventListener(e)||n.getWorker().then(r=>r.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var a,n,r;if(!((a=this.layer.timeInfo)!=null&&a.endField||(n=this.layer.timeInfo)!=null&&n.startField||(r=this.layer.timeInfo)!=null&&r.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const s=await this.getWorker();return _(s.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(d=>{const l=u.fromJSON(d);return l.features.forEach(c=>{c.layer=this.layer,c.sourceLayer=this.layer}),l}),new u({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(f)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:s=>{this.set(s.propertyName,s.value)}}}};o([p()],i.prototype,"pipelineConnectionStatus",void 0),o([p()],i.prototype,"pipelineErrorString",void 0),o([p({readOnly:!0})],i.prototype,"connectionError",null),o([p({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=o([v("esri.views.2d.layers.StreamLayerView2D")],i);const me=i;export{me as default};
