import{lp as n,dR as _,lq as g,H as x,em as T,lr as I,b as d,m as y,c as z}from"./index-CfYeSufM.js";import{x as R}from"./rasterProjectionHelper-BOOOTgKx.js";import{l as G}from"./LayerView3D-D9EaTEMQ.js";import{p as w}from"./TiledLayerView3D-D3ReP93C.js";import{m as P,l as S,_ as v,p as O,A as C,f as L,c as f}from"./rasterUtils-EeXXbNj7.js";import{y as $}from"./ImageryTileLayerView-CeTTz2Wg.js";import{y as A}from"./LayerView-Ck8FMSD2.js";import{i as E}from"./RefreshableLayerView-Bu3cytnU.js";import{r as F}from"./drapedUtils-DkjinvLd.js";import"./rasterFieldUtils-CEK67CIr.js";import"./timeSupport-BAwZ8uOa.js";import"./popupUtils-DB8vJbLy.js";const b={bandCount:3,minOutput:0,maxOutput:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class U{constructor(e,t,r=null,i=null){this.lij=e,this.type="raster-tile",this._memoryUsed=null,this._source=null,this._symbolizerParameters=null,this._bandIds=null,this._interpolation=null,this._dirty=!1,this._transformGrid=null,this.isRendereredSource=!1,this.symbolizerRenderer=null,this.rawPixelData=null,this.opacity=1,this.source=t,this.width=r||t.width,this.height=i||t.height}get source(){return this._source}set source(e){this._source=e,this._rasterTexture=n(this._rasterTexture),this._memoryUsed=null}get symbolizerParameters(){return this.isRendereredSource?{...b,maxCutOff:[1,1,1],factor:[1,1,1]}:this._symbolizerParameters||b}set symbolizerParameters(e){this._symbolizerParameters=e}get bandIds(){return this._bandIds}set bandIds(e){e!=null&&e.length>0?this._bandIds&&e.every((t,r)=>{var i;return!!((i=this._bandIds)!=null&&i[r])&&t===this._bandIds[r]})||(this._bandIds=e,this._dirty=!0):this._bandIds=null}get interpolation(){return this._interpolation||"nearest"}set interpolation(e){if(this._interpolation=e,this._rasterTexture!=null){const t=this._getRasterTextureInterpolation(e);this._rasterTexture.setSamplingMode(t==="bilinear"?_.LINEAR:_.NEAREST)}}get transformGrid(){return this._transformGrid}set transformGrid(e){this._transformGrid=e,this._transformGridTexture=n(this._transformGridTexture),this._memoryUsed=null}bind(e){return!!(this.source&&this.source.pixels&&this.source.pixels.length>0)&&((this._rasterTexture==null||this._dirty)&&this._updateRasterTexture(e,this.bandIds),this._rasterTexture!=null&&(this._updateColormapTexture(e),this.transformGrid&&this._transformGridTexture==null&&(this._transformGridTexture=P(e,this.transformGrid))),!0)}getUniforms(){const{symbolizerParameters:e,transformGrid:t,width:r,height:i,opacity:a}=this,o=S(t,[r,i],[this.source.width,this.source.height],a),m=v(e.colormap,e.colormapOffset),p=this.symbolizerParameters.type==="stretch"?O(this.symbolizerParameters):null,l=this.symbolizerParameters.type==="hillshade"?C(this.symbolizerParameters):null;return new g(o,m,p||l,this._rasterTexture,this._transformGridTexture,this._colormapTexture)}get isBilinearWithStretchColorRamp(){const{symbolizerParameters:e}=this;return this.interpolation==="bilinear"&&e.colormap!=null&&e.type==="stretch"}get memoryUsage(){if(this._memoryUsed==null){const e=[this._rasterTexture,this._transformGridTexture,this._colormapTexture];this._memoryUsed=e.map(t=>t!=null?t.descriptor.width*t.descriptor.height*4:0).reduce((t,r)=>t+r,0)}return this._memoryUsed}release(){return this._rasterTexture=n(this._rasterTexture),this._transformGridTexture=n(this._transformGridTexture),this._colormapTexture=n(this._colormapTexture),this.source=null,this.transformGrid=null,this.rawPixelData=null,!0}_updateRasterTexture(e,t){const r=this.source?this.source.extractBands(t):null;if(!(r!=null&&r.pixels&&r.pixels.length>0))return void(this._rasterTexture=n(this._rasterTexture));const i=t==null&&this.bandIds==null||t!=null&&this.bandIds!=null&&t.join("")===this.bandIds.join("");if(this._rasterTexture!=null&&i)return;this._rasterTexture=n(this._rasterTexture);const a=this._getRasterTextureInterpolation(this.interpolation);this._rasterTexture=L(e,r,a,this.isRendereredSource||this.hasStretchTypeNone())}hasStretchTypeNone(){return"stretchType"in this.symbolizerParameters&&this.symbolizerParameters.stretchType==="none"&&!this.symbolizerParameters.useGamma&&this.source.pixelType==="u8"}_getRasterTextureInterpolation(e){return this.symbolizerParameters.type==="lut"||e==="nearest"||e==="majority"||this.isBilinearWithStretchColorRamp?"nearest":"bilinear"}_updateColormapTexture(e){const t=this._colormap,r=this.symbolizerParameters.colormap;return r?t?r.length!==t.length||r.some((i,a)=>i!==t[a])?(this._colormapTexture=n(this._colormapTexture),this._colormapTexture=f(e,r),void(this._colormap=r)):void 0:(this._colormapTexture=f(e,r),void(this._colormap=r)):(this._colormapTexture=n(this._colormapTexture),void(this._colormap=null))}}let u=class extends $(E(w(G(A)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this._isAlignedMapTile=!0}initialize(){this.layer.increaseRasterJobHandlerUsage(),this.fullExtent==null&&this.addResolvingPromise(Promise.reject(new x("layerview:spatial-reference-incompatible","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})));const s=T(()=>{var e,t;return(t=(e=this.view)==null?void 0:e.basemapTerrain)==null?void 0:t.tilingSchemeLocked}).then(()=>{const e=this.view.basemapTerrain.tilingScheme,t=this.layer.tileInfo;this._isAlignedMapTile=["png","png24","png32","jpg","mixed"].includes(t.format)&&e.compatibleWith(t),this.tileInfo=this._isAlignedMapTile?t:e.toTileInfo(),this._updatingHandles.add(()=>[this.layer.renderer,this.layer.interpolation,this.layer.bandIds,this.layer.multidimensionalDefinition,this.layer.multidimensionalSubset,this.layer.rasterFunction,this.timeExtent],()=>this.refresh())});this.addResolvingPromise(s)}destroy(){this.layer.decreaseRasterJobHandlerUsage()}get _blankTile(){const s=document.createElement("canvas"),e=s.getContext("2d"),[t,r]=this.tileInfo.size;return s.width=t,s.height=r,e.clearRect(0,0,t,r),e.getImageData(0,0,t,r)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){var r,i;const s=this.layer.tileInfo,e=(r=this.tileInfo.lodAt(0))==null?void 0:r.scale,t=(i=this.layer.tileInfo.lodAt(s.lods.length-1))==null?void 0:i.scale;return this.levelRangeFromScaleRange(e,t)}_getFullExtent(){var s;return R(this.layer.serviceRasterInfo,((s=this.view.basemapTerrain)==null?void 0:s.spatialReference)??this.view.spatialReference)}async fetchTile(s,e){const t=this.tileInfo,r=this._canSymbolizeInWebGL(),i={tileInfo:t,requestRawData:r,signal:e.signal,timeExtent:this.timeExtent,requestAsImageElement:this._isAlignedMapTile,noClip:!1},{layer:a}=this,[o,m,p]=s,l=await a.fetchTile(o,m,p,i);if(l instanceof HTMLImageElement)return l;let c=l==null?void 0:l.pixelBlock;if(c==null)return this._blankTile;if(!r&&(c=await a.applyRenderer(l),c==null))return this._blankTile;const h=new U([o,m,p],c,t.size[0],t.size[1]);return r?(h.symbolizerRenderer=a.symbolizer.rendererJSON,h.symbolizerParameters=a.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(o)),h.transformGrid=l.transformGrid,h.bandIds=a.bandIds):(h.isRendereredSource=!0,h.bandIds=null),h.interpolation=a.interpolation,h}_getSymbolizerOptions(s){var t;const e=this.tileInfo.lodAt(s).resolution;return{pixelBlock:null,isGCS:((t=this.view.basemapTerrain)==null?void 0:t.spatialReference)!=null?this.view.basemapTerrain.spatialReference.isGeographic:this.view.spatialReference.isGeographic,resolution:{x:e,y:e},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(s){this._canSymbolizeInWebGL()&&JSON.stringify(s.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(s.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(s.lij[0])))}createFetchPopupFeaturesQueryGeometry(s,e){return F(s,e,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){this.suspended||this.emit("data-changed")}_canSymbolizeInWebGL(){var a,o,m;const s=I(),{symbolizer:e}=this.layer,t=(o=(a=e.lookup)==null?void 0:a.colormapLut)==null?void 0:o.indexedColormap,r=!!((m=this.layer.rasterFunction)!=null&&m.hasClipFunction),i=t&&t.length>4*(s.maxTextureSize||4906);return e.canRenderInWebGL&&!i&&!r}};d([y({readOnly:!0})],u.prototype,"_blankTile",null),d([y({readOnly:!0})],u.prototype,"imageFormatIsOpaque",null),d([y({readOnly:!0})],u.prototype,"hasMixedImageFormats",null),d([y({readOnly:!0})],u.prototype,"dataLevelRange",null),u=d([z("esri.views.3d.layers.ImageryTileLayerView3D")],u);const K=u;export{K as default};
