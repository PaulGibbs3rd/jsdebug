import{aP as L,aW as F,aG as N,e$ as C,nf as D,bo as V,ah as G,gB as z,b as s,m as i,f0 as H,c as S,fu as P,D as J,S as B,O as U,am as W}from"./index-CzvLtnX1.js";import{d as T}from"./Viewshed-DAXA_m8H.js";import{c as Y}from"./Analysis-BhVGdIw4.js";import"./featureReferenceUtils-Bk8cvZgN.js";const E=N.ofType(T);let l=class extends Y{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(L(()=>this._computeExtent(),e=>{e.pending==null&&(this._extent=e.extent)},F))}get viewsheds(){return this._get("viewsheds")||new E}set viewsheds(e){this._set("viewsheds",C(e,this.viewsheds,E))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get requiredPropertiesForEditing(){return this.viewsheds.items.map(({observer:e})=>e)}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const r=this.viewsheds.filter(t=>t.observer!=null),c=r.map(t=>t.observer).toArray(),a=D(c,e);return a.pending!=null?{pending:a.pending,extent:null}:{pending:null,extent:a.geometries.map((t,u)=>{const v=r.at(u);return t!=null&&v!=null?this._computeViewshedExtent(this.viewsheds.at(u),t):null}).filter(t=>t!=null).reduce((t,u)=>k(t,u),null)}}_computeViewshedExtent(e,r){const{farDistance:c,heading:a,tilt:t,horizontalFieldOfView:u,verticalFieldOfView:v}=e,{spatialReference:R}=r,g=u/2,x=v/2,b=c/R.metersPerUnit,j=[V.normalize(a-g),a,V.normalize(a+g)],p=G.fromPoint(r),f=w=>{const d=j.map(o=>V.normalize(o-w));if(d[0]>d[2]||u===360)return b;const h=d.map(o=>Math.abs(o>180?360-o:o)).reduce((o,m)=>o>m?m:o);return h>90?0:b*Math.cos(z(h))};p.xmax+=f(90),p.xmin-=f(-90),p.ymax+=f(0),p.ymin-=f(180);const y=r.z;if(y!=null){let w=y,d=y;const h=t-90,o=P(h+x,-90,90),m=P(h-x,-90,90),O=R?.isGeographic?c:b;w+=O*$(o),d+=O*$(m);const q=A(x)*O,M=$(h)*q*(1-A(g));t<90&&(w-=M),t>90&&(d-=M),p.zmax=Math.max(w,y),p.zmin=Math.min(d,y)}return p}clear(){this.viewsheds.removeAll()}};function k(e,r){return e==null?r:r==null?e:e.union(r)}function A(e){return Math.cos(z(e))}function $(e){return Math.sin(z(e))}s([i({type:["viewshed"]})],l.prototype,"type",void 0),s([i({cast:H,type:E,nonNullable:!0})],l.prototype,"viewsheds",null),s([i({readOnly:!0})],l.prototype,"spatialReference",null),s([i()],l.prototype,"_extent",void 0),s([i({readOnly:!0})],l.prototype,"extent",null),s([i({readOnly:!0})],l.prototype,"requiredPropertiesForEditing",null),l=s([S("esri.analysis.ViewshedAnalysis")],l);const _=l;let n=class extends J(B(U)){constructor(e){super(e),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new _,this.opacity=1}initialize(){this.addHandles(L(()=>this.source,(e,r)=>{r!=null&&r.parent===this&&(r.parent=null),e!=null&&(e.parent=this)},F))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(e){this.source===e&&(this.source=new _)}get analysis(){return this.source}set analysis(e){this.source=e}get viewsheds(){return this.source.viewsheds}set viewsheds(e){this.source.viewsheds=e}writeViewsheds(e,r,c,a){r.viewsheds=e.filter(t=>t.isValid()).map(t=>t.toJSON(a)).toJSON()}};s([i({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),s([i({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),s([i({type:_,nonNullable:!0})],n.prototype,"source",void 0),s([i({readOnly:!0})],n.prototype,"spatialReference",null),s([i({readOnly:!0})],n.prototype,"fullExtent",null),s([i({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),s([i({type:["show","hide"]})],n.prototype,"listMode",void 0),s([i({type:N.ofType(T),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),s([W("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=s([S("esri.layers.ViewshedLayer")],n);const Z=n;export{Z as default};
